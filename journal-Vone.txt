Today's corporate world is growing with the speed of light, everything in our corporate world is getting automated to boost the industry but the way of taking
attendance or tracking a record of people's presence is still ancient way. Educational institutes still use the old method of calling out the name of a roll of
students. We can say that companies, educational institutes and governmental offices around the world still use some of the old methods like managing attendance sheets. However nowadays in the fast-paced working environment, these old methods are too inconvenient and inefficient.  The method of taking attendance records has evolved through the years but still, they can't completely fix the problems like:

1) A Biometric system using fingerprints is the most common way of taking attendance that is used by companies to ensure that employees are truly present by scanning their fingerprints or handprint. But we all know after 2020 it is not a good idea to use a public fingerprint sensor.

2) Scanning the QR code on the ID card, also takes time and is not that convenient.


In the corporate world, Employee attendance affects the overtime pay, your customer's experience and your overall finances. In the Educational field, it affects the whole progress of the students.
Challenges to attendance include unexpected absences, late arrivals, early departures and sick employees coming to work.
We should craft attendance policies and use time and attendance software to measure employees’ hours.
The modern way we want to implement is to fix a sensor which keeps a track of who is present at that particular point. How is this different from CCTV, CCTV camera just records the activity and stores it in the server, our sensor records the activity, analysis the data that it receives, recognizes the face, calculates the activity and stores the whole summary of what exactly was happening at that point. In simple words we can say a CCTV camera is like an eye and our sensor is like an eye with a brain.

In different types of offices, security rooms include multiple monitors with multiple camera recordings on them. There we find out that only one or maybe two security guards monetise all that information. Let's be honest it's impossible to notice if something happens then. They might pay attention after the disaster happens.
Even after something happens it's really hard to recognize at what point in time it happened. Even after so many precautions, it's a big security threat for us to rely on CCTV cameras which will just show us how the event was caused. We all know precaution is better than prevention.


The device we are planning to build is will analyse all the data from the sensors and provide that data on a particular screen making it easier to handle and monetise. It will also send a warning if it senses some unusual activity is taking place. 

CCTV cameras in the bank take the footage at night but it won't be able to stop it from happening. Our future updates will send the signal at that point of time to the nearest police station, and if we get data from government files then at the same time it will be able to recognize the person through addhar links. As we all know addhar has the whole biometric of a person.

In criminal cases, if police suspect someone then it is impossible to keep track of that person for 24 hrs using a CCTV camera because then we have to assign another person to watch him through a CCTV camera. Our device with the help of AI will be capable to keep track of the person.
We have already seen fire sensors which spray water on that detected area. Just like  that our device will also detect activities and will give us signals on our mobiles
  


Parts required
To build Arduino projects you need some electronics components beside the bare Arduino board.
•	The components are:
•	1 Esp32 camera module
•	1 bread board
•	1 5V battery
•	Jumper wires
•	Wires
•	Windows computer

Introducing the Arduino

So take a deep dive into the most important component of the project, that is the arduino board.
The Arduino is a small computer that you can program to read information from the world around you and send commands to the outside world. All of this is possible because you can connect several devices like here we will connect the esp32 camera module.
You can do amazing projects with it, there is no limit for what you can do, and using your imagination everything is possible!

Basically, it is a small development board with a brain (also known as a microcontroller) that you can connect to electrical circuits. This makes it easy to read inputs – read data from the outside – and control outputs - send a command to the outside. The brain of this board (Arduino Uno) is an ATmega328p chip where you can store your programs that will tell your Arduino what to do.
We have to insert our code using Arduino IDE
You can download it from here:
https://www.arduino.cc/en/software
While uploading the code the arduino must be connected to the pc using a wire.

Parts of the Arduino board:

• Microcontroller: the ATmega328p is the Arduino brain. Everything on the Arduino board is meant to support this microcontroller. This is where you store your programs to tell the Arduino what to do. ATmega328p has a modified hardvard architecture 8-bit RISC processor core. ATmega328P is one of the high performances AVR technology microcontroller with a large number of pins and features
• Digital pins: Arduino has 14 digital pins, labeled from 0 to 13 that can act as inputs or outputs. o When set as inputs, these pins can read voltage. They can only read two states: HIGH or LOW. o When set as outputs, these pins can apply voltage. They can only apply 5V (HIGH) or 0V (LOW).
• PWM pins: These are digital pins marked with a ~ (pins 11, 10, 9, 6, 5 and 3). PWM stands for “pulse width modulation” and allows the digital pins output “fake” varying amounts of voltage. You’ll learn more about PWM later. 
• TX and RX pins: digital pins 0 and 1. The T stands for “transmit” and the R for “receive”. The Arduino uses these pins to communicate with other electronics via Serial. Arduino also uses these pins to communicate with your computer when uploading new code. Avoid using these pins for other tasks other than serial communication, unless you’re running out of pins. 
• LED attached to digital pin 13: This is useful for an easy debugging of the Arduino sketches. It will be removed after testing 
• TX and RX LEDs: these leds blink when there are information being sent between the computer and the Arduino.
• Analog pins: the analog pins are labeled from A0 to A5 and are often used to read analog sensors. They can read different amounts of voltage between 0 and 5V. Additionally, they can also be used as digital output/input pins like the digital pins. 
• Power pins: the Arduino provides 3.3V or 5V through these pins. This is really useful since most components require 3.3V or 5V to operate. The pins labelled as “GND” are the ground pins. 
• Reset button: when you press that button, the program that is currently being run in your Arduino restarts. You also have a Reset pin next to the power pins that acts as reset button. When you apply a small voltage to that pin, it will reset the Arduino.
 • Power ON LED: will be on since power is applied to the Arduino. 
• USB jack: you need a male USB A to male USB B cable (shown in figure below) to upload programs from your computer to your Arduino board. This cable also powers your Arduino.

• Power jack: you can power the Arduino through the power jack. The recommended input voltage is 7V to 12V. There are several ways to power up your Arduino: rechargeable batteries, disposable batteries, wall-warts and solar panel. While uploading the code it should be connected with the computer then when we will receive the http link then we will disconnect the esp32 camera with arduino then will connect it with 5V battery

Downloading the Arduino IDE
 The Arduino IDE (Integrated Development Environment) is where you develop your programs that will tell the Arduino what to do. You can load new programs onto the main chip, the ATmega328p, via USB using the Arduino IDE. To download the Arduino IDE, please click on the following link: https://www.arduino.cc/en/software.
 Select which Operating System you’re using and download it. Then, simply follow the installation wizard to install the Arduino IDE. When you first open the Arduino IDE, you should see something similar to the figure below:
Connecting your Arduino
 Connect your Arduino UNO to your computer via USB. After connecting your Arduino with a USB cable, you need to make sure that the Arduino IDE has selected the right board. In our case, we’re using Arduino Uno, so we should go to Tools > Board: > Arduino/Genuino Uno.
Then, you should select the serial port where your Arduino is connected to. Go to Tools > Port and select the right port




Uploading an Arduino Sketch
 To show you how to upload code to your Arduino board, we’ll show you a simple example. This is one of the most basic examples – it consists in blinking the on-board LED or digital pin 13 every second.
Open your Arduino IDE.
Go to File> Preference
Copy-paste the following URLs at Aditional boards Manager URLs : https://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json

Then go to Tools> Board >Boards Manager> Search esp 32 module and install it 
Then you have to upload a example sketch for that 
Go to File> Example> ESP 32 >camera> CameraWebServer
then a new page will open where you will find that all the required  codes are written
***changes in code***
step 1)
 in that code you will find a variable named “const char* ssid=”*******” // here you have to type your wifi name and another variable will be available below that named “const char*  password=”*******”// here you have to type your wifi password

step2)
 you have to choose your camera module:
here in this project we used “AI thinker” // there will be a section named “select camera module”
there you have to uncomment the camera module you are using ( remove the “//” written before #define ), so in our case our module looks like “ #define CAMERA_MODEL_AI_THINKER ”
 except the module you are using each and every camera module should be commented( put “//” before the module name ) 
***setting changes***



Step3) 
go to tools> make few settings **set all the following settings **
*Board “ESP32 Wrover Module”
*Flash Mode: “QIO”
*Partition Scheme: “ Huge APP( 3MB No OTA/1MB SPIFFS ) ”
*Flash Frequency: “40MHz”
*Upload Speed : “115200”
*Core Debug Level : “None”
*Port : “ COM3(Arduino Uno)  ”
*Programmer: “AVR ISP”
***uploading**
Step1)
Click the upload button under the edit button on ide
Then on the esp cam model click on the reset button
// you will see uploading started in the footer portion of the screen you will see the percentage that how much code is unloaded (0% to 100%)

It will take 1 min or more

Step2)
When uploading is 100% completed the disconnect the female to female wire which connects 
GPIO-0 to GND on the esp32 module

Step3)
After disconnecting the click on serial monitor which is in the top right most corner(looks like a magnifying glass)

Step4)
Then in the bottom left most part you have select the braud rate 115200


Step5)
then if you press the reset button of the esp32 cam model
 then you should get the ip address on the screen 
looks like  “camera is ready : http//******* to connect “
copy and paste the ip address on your browser then a page should open with red buttons and black screen then in the bottom part you have to click on the “start stream” button then you should be able to seen the screen working 
On the serial monitor you see the data is been shown in the form of hexadecimal that is collected from the screen 
 ** you should get the desired result if you get any error then disconnect the esp32 module with arduino board and again do it**



By default, the Arduino IDE comes pre-configured for the Arduino UNO. Click the Upload button and wait a few seconds.
After a few seconds, you should see a Done uploading message.
This code simply blinks the on-board LED on your Arduino UNO (highlighted with red color). You should see the little LED turn on for one second, and turn off for another second repeatedly.
Control an Output and Read an Input
 An Arduino board contains digital pins, analog pins and PWM pins. Difference between digital, analog and PWM In digital pins, you have just two possible states, which are on or off. These can also be referred as High or Low, 1 or 0 and 5V or 0V. For example, if an LED is on, then, its state is High or 1 or 5V. If it is off, you’ll have Low, or 0 or 0V. In analog pins, you have unlimited possible states between 0 and 1023. This allows you to read sensor values. For example, with a light sensor, if it is very dark, you’ll read 1023, if it is very bright you’ll read 0 If there is a brightness between dark and very bright you’ll read a value between 0 and 1023.
WM pins are digital pins, so they output either 0 or 5V. However these pins can output “fake” intermediate voltage values between 0 and 5V, because they can perform “Pulse Width Modulation” (PWM). PWM allows to “simulate” varying levels of power by oscillating the output voltage of the Arduino.
Controlling an output To control a digital output you use the digitalWrite() function and between brackets you write, the pin you want to control, and then HIGH or LOW. To control a PWM pin you use the analogWrite() function and between brackets you write the pin you want to control and a number between 0 and 255. Reading an input To read an analog input you use the function analogRead() and for a digital input you use digitalRead(). The best way for you to learn Arduino is practising. So, choose a project and start building something.





